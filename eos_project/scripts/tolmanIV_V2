# ======================================================
# Script: tolmanIV.py
# Genera tabla rho(r), P(r) para la Solución IV de Tolman
# con chequeos de aceptabilidad física
# ======================================================

import numpy as np
import pandas as pd
import os

# ----------------------------
# Parámetros del modelo
# ----------------------------
A = 5.0   # parámetro de escala (km, unidades arbitrarias)
R = 10.0  # radio estelar máximo
Npoints = 100
tol = 1e-10  # tolerancia numérica

# ----------------------------
# Definición de las funciones
# ----------------------------
def rho_tolmanIV(r, A):
    """Densidad Tolman IV (8πρ)."""
    return (3*A**2 + r**2) / (A**2 + r**2)**2

def P_tolmanIV(r, A):
    """Presión Tolman IV (8πP)."""
    return (A**2 - r**2) / (A**2 + r**2)**2

# ----------------------------
# Generar tabla
# ----------------------------
# Usamos hasta R*0.999 para evitar borde exacto
r_vals = np.linspace(0, R*0.999, Npoints)
rho_vals = rho_tolmanIV(r_vals, A)
P_vals = P_tolmanIV(r_vals, A)

# Derivadas para monotonicidad y causalidad
dr = r_vals[1] - r_vals[0]
drho_dr = np.gradient(rho_vals, dr)
dP_dr = np.gradient(P_vals, dr)

# Para causalidad: dP/dρ = (dP/dr) / (dρ/dr)
with np.errstate(divide='ignore', invalid='ignore'):
    dP_drho = np.where(drho_dr != 0, dP_dr / drho_dr, np.nan)

# ----------------------------
# Etiquetado de aceptabilidad
# ----------------------------
labels = []
for i in range(len(r_vals)):
    ok = True
    # 1. Positividad
    if rho_vals[i] < -tol or P_vals[i] < -tol:
        ok = False
    # 2. Monotonía decreciente
    if drho_dr[i] > tol or dP_dr[i] > tol:
        ok = False
    # 3. Causalidad: dP/dρ <= 1 (c=1)
    if not np.isnan(dP_drho[i]) and dP_drho[i] > 1 + tol:
        ok = False
    labels.append(1 if ok else 0)

# ----------------------------
# Guardar en CSV
# ----------------------------
# Ruta al directorio de datos
outdir = os.path.join("..", "data", "tolman")
os.makedirs(outdir, exist_ok=True)
outfile = os.path.join(outdir, "tolmanIV.csv")

df = pd.DataFrame({
    "r": r_vals,
    "rho": rho_vals,
    "P": P_vals,
    "dP_drho": dP_drho,
    "label": labels
})

df.to_csv(outfile, index=False)
print(f"Tabla generada: {outfile}")
print("¿Todas las condiciones cumplidas?:", df["label"].all())
