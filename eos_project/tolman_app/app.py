import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Tolman IV Explorer",
    page_icon="üåü",
    layout="wide"
)

def load_csv_files():
    """Encuentra todos los archivos CSV de Tolman"""
    data_path = Path("../data/tolman")
    csv_files = list(data_path.glob("*.csv"))
    return {file.name: file for file in csv_files}

def load_data(file_path):
    """Carga un archivo CSV"""
    return pd.read_csv(file_path)

def create_plots(data, filename):
    """Crea las 3 gr√°ficas principales"""
    fig, axes = plt.subplots(1, 3, figsize=(15, 5))
    
    # Densidad vs radio
    axes[0].plot(data['r'], data['rho'], 'b-', linewidth=2)
    axes[0].set_xlabel('r')
    axes[0].set_ylabel('œÅ (densidad)')
    axes[0].set_title('Densidad vs Radio')
    axes[0].grid(True, alpha=0.3)
    
    # Presi√≥n vs radio
    axes[1].plot(data['r'], data['p'], 'r-', linewidth=2)
    axes[1].set_xlabel('r')
    axes[1].set_ylabel('p (presi√≥n)')
    axes[1].set_title('Presi√≥n vs Radio')
    axes[1].grid(True, alpha=0.3)
    
    # Ecuaci√≥n de estado
    axes[2].plot(data['rho'], data['p'], 'g-', linewidth=2)
    axes[2].set_xlabel('œÅ (densidad)')
    axes[2].set_ylabel('p (presi√≥n)')
    axes[2].set_title('Ecuaci√≥n de Estado')
    axes[2].grid(True, alpha=0.3)
    
    plt.tight_layout()
    return fig

# INTERFAZ PRINCIPAL
def main():
    st.title("üåü Tolman IV Explorer")
    st.markdown("Explorador interactivo de soluciones Tolman IV")
    
    # Cargar archivos disponibles
    csv_files = load_csv_files()
    
    if not csv_files:
        st.error("‚ùå No se encontraron archivos CSV en ../data/tolman/")
        return
    
    # Sidebar para selecci√≥n
    st.sidebar.header("üìÅ Seleccionar Archivo")
    selected_file = st.sidebar.selectbox(
        "Archivo CSV:",
        options=list(csv_files.keys()),
        index=0
    )
    
    # Cargar y mostrar datos
    if selected_file:
        try:
            data = load_data(csv_files[selected_file])
            
            # Informaci√≥n del archivo
            st.header(f"üìä {selected_file}")
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Puntos de datos", len(data))
            with col2:
                st.metric("œÅ central", f"{data['rho'].iloc[0]:.4f}")
            with col3:
                st.metric("p central", f"{data['p'].iloc[0]:.4f}")
            
            # Gr√°ficas
            st.subheader("üìà Gr√°ficas")
            fig = create_plots(data, selected_file)
            st.pyplot(fig)
            
            # Verificaci√≥n f√≠sica b√°sica
            st.subheader("üîç Verificaci√≥n F√≠sica")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                rho_ok = (data['rho'] > 0).all()
                st.metric("Densidad positiva", "‚úÖ" if rho_ok else "‚ùå")
            
            with col2:
                p_ok = (data['p'] >= 0).all()
                st.metric("Presi√≥n no negativa", "‚úÖ" if p_ok else "‚ùå")
            
            with col3:
                energy_ok = (data['rho'] >= data['p']).all()
                st.metric("Condici√≥n energ√≠a", "‚úÖ" if energy_ok else "‚ùå")
            
        except Exception as e:
            st.error(f"‚ùå Error cargando archivo: {e}")

if __name__ == "__main__":
    main()

